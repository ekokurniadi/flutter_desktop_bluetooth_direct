#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.59.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_init__impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(init_()),
    )
}
fn wire_get_adapter_state_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_adapter_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_adapter_state()),
    )
}
fn wire_discover_device_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "discover_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(discover_device()),
    )
}
fn wire_connect_to_device_impl(
    port_: MessagePort,
    service_uuid: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect_to_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_service_uuid = service_uuid.wire2api();
            move |task_callback| Ok(connect_to_device(api_service_uuid))
        },
    )
}
fn wire_disconnect_impl(port_: MessagePort, service_uuid: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disconnect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_service_uuid = service_uuid.wire2api();
            move |task_callback| Ok(disconnect(api_service_uuid))
        },
    )
}
fn wire_start_printer_impl(
    port_: MessagePort,
    service_uuid: impl Wire2Api<String> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "start_printer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_service_uuid = service_uuid.wire2api();
            let api_data = data.wire2api();
            move |task_callback| Ok(start_printer(api_service_uuid, api_data))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for BluetoothDevice {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.name.into_dart(),
            self.address.into_dart(),
            self.status.into_dart(),
            self.service_uuid.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BluetoothDevice {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
