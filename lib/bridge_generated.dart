// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.59.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart' as meta;

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class Rust {
  /// INIT LOGGER
  Future<void> init({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  /// CHECK BLUETOOTH IS EXIST OR NOT
  Future<bool> getAdapterState({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAdapterStateConstMeta;

  /// INFO : DISCOVER BLUETOOTH DEVICE
  Future<List<BluetoothDevice>> discoverDevice({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscoverDeviceConstMeta;

  /// INFO : CONNECT TO DEVICE
  Future<bool> connectToDevice({required String serviceUuid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectToDeviceConstMeta;

  Future<bool> disconnect({required String serviceUuid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta;

  Future<void> startPrinter(
      {required String serviceUuid, required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartPrinterConstMeta;
}

@freezed
@meta.immutable
class BluetoothDevice with _$BluetoothDevice {
  const factory BluetoothDevice({
    String? name,
    String? address,
    required bool status,
    required List<String> serviceUuid,
  }) = _BluetoothDevice;
}

class RustImpl implements Rust {
  final RustPlatform _platform;
  factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustImpl.wasm(FutureOr<WasmModule> module) =>
      RustImpl(module as ExternalLibrary);
  RustImpl.raw(this._platform);
  Future<void> init({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_",
        argNames: [],
      );

  Future<bool> getAdapterState({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_adapter_state(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kGetAdapterStateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAdapterStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_adapter_state",
        argNames: [],
      );

  Future<List<BluetoothDevice>> discoverDevice({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discover_device(port_),
      parseSuccessData: _wire2api_list_bluetooth_device,
      constMeta: kDiscoverDeviceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscoverDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "discover_device",
        argNames: [],
      );

  Future<bool> connectToDevice({required String serviceUuid, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serviceUuid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_to_device(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kConnectToDeviceConstMeta,
      argValues: [serviceUuid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectToDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_to_device",
        argNames: ["serviceUuid"],
      );

  Future<bool> disconnect({required String serviceUuid, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serviceUuid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_disconnect(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kDisconnectConstMeta,
      argValues: [serviceUuid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect",
        argNames: ["serviceUuid"],
      );

  Future<void> startPrinter(
      {required String serviceUuid, required Uint8List data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serviceUuid);
    var arg1 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start_printer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kStartPrinterConstMeta,
      argValues: [serviceUuid, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartPrinterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_printer",
        argNames: ["serviceUuid", "data"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  BluetoothDevice _wire2api_bluetooth_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BluetoothDevice(
      name: _wire2api_opt_String(arr[0]),
      address: _wire2api_opt_String(arr[1]),
      status: _wire2api_bool(arr[2]),
      serviceUuid: _wire2api_StringList(arr[3]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  List<BluetoothDevice> _wire2api_list_bluetooth_device(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_bluetooth_device).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustPlatform extends FlutterRustBridgeBase<RustWire> {
  RustPlatform(ffi.DynamicLibrary dylib) : super(RustWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init_(
    int port_,
  ) {
    return _wire_init_(
      port_,
    );
  }

  late final _wire_init_Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init_');
  late final _wire_init_ = _wire_init_Ptr.asFunction<void Function(int)>();

  void wire_get_adapter_state(
    int port_,
  ) {
    return _wire_get_adapter_state(
      port_,
    );
  }

  late final _wire_get_adapter_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_adapter_state');
  late final _wire_get_adapter_state =
      _wire_get_adapter_statePtr.asFunction<void Function(int)>();

  void wire_discover_device(
    int port_,
  ) {
    return _wire_discover_device(
      port_,
    );
  }

  late final _wire_discover_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_discover_device');
  late final _wire_discover_device =
      _wire_discover_devicePtr.asFunction<void Function(int)>();

  void wire_connect_to_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> service_uuid,
  ) {
    return _wire_connect_to_device(
      port_,
      service_uuid,
    );
  }

  late final _wire_connect_to_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_connect_to_device');
  late final _wire_connect_to_device = _wire_connect_to_devicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_disconnect(
    int port_,
    ffi.Pointer<wire_uint_8_list> service_uuid,
  ) {
    return _wire_disconnect(
      port_,
      service_uuid,
    );
  }

  late final _wire_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_disconnect');
  late final _wire_disconnect = _wire_disconnectPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_start_printer(
    int port_,
    ffi.Pointer<wire_uint_8_list> service_uuid,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_start_printer(
      port_,
      service_uuid,
      data,
    );
  }

  late final _wire_start_printerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_start_printer');
  late final _wire_start_printer = _wire_start_printerPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
